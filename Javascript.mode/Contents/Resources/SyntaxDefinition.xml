<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <head>
        <name>JavaScript</name> <!-- The definitions title -->
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$]]></charsintokens> <!-- Valid Characters for Variables -->
        <!-- <charsdelimitingtokens></charsdelimitingtokens> -->
    </head>

    <states>

       <default id="Base" scope="meta.default">
            <keywords id="Objects" useforautocomplete="yes" scope="support.class.standard.js">
                <string>Object</string>
                <string>Function</string>
                <string>String</string>
                <string>Array</string>
                <string>Boolean</string>
                <string>Number</string>
                <string>Date</string>
                <string>Math</string>
                <string>RegExp</string>
                <string>Error</string>
                <string>EvalError</string>
                <string>RangeError</string>
                <string>ReferenceError</string>
                <string>SyntaxError</string>
                <string>TypeError</string>
                <string>URIError</string>
            </keywords>

            <keywords id="Keywords" useforautocomplete="yes" scope="keyword.control.js">
                <string>break</string>
                <string>case</string>
                <string>catch</string>
                <string>const</string>
                <string>continue</string>
                <string>debugger</string>
                <string>default</string>
                <string>delete</string>
                <string>do</string>
                <string>else</string>
                <string>extends</string>
                <string>final</string>
                <string>finally</string>
                <string>for</string>
                <string>function</string>
                <string>goto</string>
                <string>if</string>
                <string>implements</string>
                <string>import</string>
                <string>in</string>
                <string>instanceof</string>
                <string>interface</string>
                <string>native</string>
                <string>new</string>
                <string>package</string>
                <string>protected</string>
                <string>public</string>
                <string>return</string>
                <string>static</string>
                <string>super</string>
                <string>switch</string>
                <string>synchronized</string>
                <string>this</string>
                <string>throw</string>
                <string>transient</string>
                <string>try</string>
                <string>typeof</string>
                <string>var</string>
                <string>volatile</string>
                <string>while</string>
                <string>with</string>
                <string>class</string>
                <string>void</string>
            </keywords>

            <keywords id="Types" useforautocomplete="yes" scope="keyword.type.js">
                <string>boolean</string>
                <string>byte</string>
                <string>char</string>
                <string>double</string>
                <string>enum</string>
                <string>float</string>
                <string>int</string>
                <string>long</string>
                <string>short</string>
            </keywords>

            <keywords id="Operators" useforautocomplete="no" scope="language.operator">
                <regex>([\+\-\*\/\=\!\&lt;\&gt;\%])</regex>
            </keywords>

            <keywords id="Numbers" inverted-color="#5d56ff" useforautocomplete="no" scope="constant.numeric.js">
                <regex>(?&lt;![\w\d\._])((?:(?:(?:[0-9]+\.[0-9]*)|(\.[0-9]+))(?:[eE][+\-]?[0-9]+)?[fFlL]?)|(?:(?:(?:[1-9][0-9]*)|0(?:[1-7][0-7]*)?|(?:0[xX][0-9a-fA-F]+))(?:(?:[uU][lL]?)|(?:[lL][uU]?))?))(?![\w\d\._])</regex>
            </keywords>

            <keywords id="Number Literals" inverted-color="#5d56ff" useforautocomplete="YES" scope="constant.numeric.keyword.js">
                <string>true</string>
                <string>false</string>
                <string>null</string>
                <string>NaN</string>
                <string>infinity</string>
                <string>undefined</string>
            </keywords>

            <keywords id="FunctionRegex" useforautocomplete="no" scope="language.function.js">
                <regex>([\$A-Za-z0-9_]+[ \t]*)\(</regex>
            </keywords>

            <keywords id="Variables" useforautocomplete="yes" scope="language.variable">
                <regex>(var|,)(.*?)=</regex>
            </keywords>

            <state id="AutodocComment" type="comment" foldable="yes" scope="comment.block.documentation.js">
                <begin><regex>/\*"</regex></begin>
                <end><regex>"\*/</regex></end>
            </state>

            <state id="Comment" type="comment" foldable="yes" scope="comment.block.js">
                <begin><regex>/\*</regex><autoend>\*/</autoend></begin>
                <end><regex>\*/</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>

            <state id="SingleComment" type="comment" scope="comment.line.double-slash.js">
                <begin><regex>//</regex></begin>
                <end><regex>[\n\r]</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>

            <state id="Regular Expressions" type="string" scope="string.regex.js">
                <!--CODA <begin><regex>(?i)(?&lt;=[=(,:\+~!]|^|return|;|(?:\|\|))\s*/(?![/*+{}?])</regex></begin>-->
                <begin><regex>(?i)(?&lt;=[=(,:\+~!?]|return|;)\s*/(?![/*+{}?\r\n])</regex></begin>
                <end><regex>/[cgimosx]*</regex></end>

                <state id="Escaped Characters" scope="string.regex.escaped.js">
                    <begin><regex>\\</regex></begin>
                    <end><regex>.</regex></end>	
                </state>
            </state>

            <state id="String" type="string" scope="string.double.js">
                <begin><regex>"</regex></begin>
                <end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
            </state>

            <state id="SingleString" type="string" scope="string.single.js">
                <begin><regex>'</regex></begin>
                <end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
            </state>

            <state id="Block" type="block" foldable="yes" indent="yes" scope="meta.block.curly">
                <begin><regex>{</regex><autoend>}</autoend></begin>
                <end><regex>}</regex></end>
                <import mode="JavaScript" />
            </state>

        </default>

    </states>

</syntax>
